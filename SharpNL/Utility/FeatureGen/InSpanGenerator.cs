// 
//  Copyright 2014 Gustavo J Knuppe (https://github.com/knuppe)
// 
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// 
//   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   - May you do good and not evil.                                         -
//   - May you find forgiveness for yourself and forgive others.             -
//   - May you share freely, never taking more than you give.                -
//   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//  

using System;
using System.Collections.Generic;
using SharpNL.NameFind;

namespace SharpNL.Utility.FeatureGen {
    /// <summary>
    /// Generates features if the tokens are recognized by the provided <see cref="ITokenNameFinder"/>.
    /// </summary>
    [TypeClass("opennlp.tools.util.featuregen.InSpanGenerator")]
    public class InSpanGenerator : FeatureGeneratorAdapter {

        private readonly string prefix;
        private readonly ITokenNameFinder finder;
        private string[] currentSentence;
        private Span[] currentNames;

        /// <summary>
        /// Initializes a new instance of the <see cref="InSpanGenerator"/> class.
        /// </summary>
        /// <param name="prefix">
        /// The prefix is used to distinguish the generated features from 
        /// features generated by other instances of <see cref="InSpanGenerator"/>s.</param>
        /// <param name="finder">The <see cref="ITokenNameFinder"/> used to detect the names.</param>
        /// <exception cref="System.ArgumentNullException">
        /// <paramref name="prefix"/>
        /// or
        /// <paramref name="finder"/>
        /// </exception>
        public InSpanGenerator(string prefix, ITokenNameFinder finder) {
            if (prefix == null)
                throw new ArgumentNullException(nameof(prefix));

            if (finder == null)
                throw new ArgumentNullException(nameof(finder));

            this.prefix = prefix;
            this.finder = finder;
        }

        /// <summary>
        /// Adds the appropriate features for the token at the specified index with the
        /// specified array of previous outcomes to the specified list of features.
        /// </summary>
        /// <param name="features">The list of features to be added to.</param>
        /// <param name="tokens">The tokens of the sentence or other text unit being processed.</param>
        /// <param name="index">The index of the token which is currently being processed.</param>
        /// <param name="previousOutcomes">The outcomes for the tokens prior to the specified index.</param>
        public override void CreateFeatures(List<string> features, string[] tokens, int index, string[] previousOutcomes) {

            // cache results for sentence
            if (currentSentence != tokens) {
                currentSentence = tokens;
                currentNames = finder.Find(tokens);
            }

            // iterate over names and check if a span is contained
            foreach (var currentName in currentNames) {
                if (currentName.Contains(index)) {

                    // found a span for the current token
                    features.Add(prefix + ":w=dic");
                    features.Add(prefix + ":w=dic=" + tokens[index]);

                    // TODO: consider generation start and continuation features

                    break;
                }
            }
        }
    }
}